# .github/workflows/ci.yml â€” lint/tests, PG integration test, SBOM, security scans
name: Aegis CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    env:
      TEST_USER_PASSWORD: "TestPass123!"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install -r requirements.txt pre-commit
      - run: pip install -e .
      - run: python test_import.py
      - run: pre-commit run --all-files
      - run: python -m pytest -q

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      # Install security scanning tools
      - name: Install security tools
        run: |
          pip install bandit safety pip-audit
          npm install -g audit-ci
      
      # Bandit security scan
      - name: Run Bandit security scan
        run: bandit -r app/ -f json -o bandit-report.json || true
      
      # Safety check for known vulnerabilities
      - name: Run Safety check
        run: safety check --json --output safety-report.json || true
      
      # Pip audit for dependency vulnerabilities
      - name: Run pip-audit
        run: pip-audit --format json --output pip-audit-report.json || true
      
      # Upload security reports
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  integration-postgres:
    needs: lint-test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/postgres
      PG_TRIGGER_TEST_DSN: postgresql+psycopg2://postgres:postgres@localhost:5432/postgres
      TEST_USER_PASSWORD: "TestPass123!"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install -r requirements.txt
      - run: pip install -e .
      - run: python test_import.py
      - run: echo "DATABASE_URL=$DATABASE_URL"; echo "PG_TRIGGER_TEST_DSN=$PG_TRIGGER_TEST_DSN"
      - run: alembic upgrade head
      - run: pytest -k hash_integrity -v

  container-security:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      
      # Build Docker image
      - name: Build Docker image
        run: docker build -t aegis-event-bus .
      
      # Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'aegis-event-bus:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # Upload container security results
      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        with:
          name: container-security
          path: trivy-results.sarif

  sbom:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install cyclonedx-bom
      # Option A: from lock file (preferred)
      - run: cyclonedx-py requirements -i requirements.lock -o sbom.xml
      # If the above ever breaks again, uncomment this env scan instead:
      # - run: pip install -r requirements.lock
      # - run: cyclonedx-py env -o sbom.xml
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.xml
